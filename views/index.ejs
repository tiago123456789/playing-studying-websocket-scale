<!DOCTYPE html>
<html>

<head>
  <title>How to scale socket horizontaly</title>
  <!-- CSS only -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">
</head>

<body>
  <div class="container">
    <h1>How to scale socket horizontaly</h1>
    <div id="container"></div>
    <canvas id="canvas" width="700" height="300" style="border:1px solid red;">
    </canvas>
    <br>
    <button id="right" class="btn btn-primary">move</button>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js"
    integrity="sha512-UNM1njAgOFUa74Z0bADwAq8gbTcqZC8Ej4xPSzpnh0l6KMevwvkBvbldF9uR++qKeJ+MOZHRjV1HZjoRvjDfNQ=="
    crossorigin="anonymous"></script>
  <script>

    (function setIdPlayer() {
      const { v4 } = uuid;
      const id = sessionStorage.getItem("id");
      if (!id) {
        sessionStorage.setItem("id", v4());
      }
    })();

    function getIdPlayer() {
      return sessionStorage.getItem("id");
    }

    const room = JSON.parse('<%- JSON.stringify(room) %>');
    const urlWebsocket =  '<%- urlWebsocket  %>';
    var c = document.getElementById("canvas");
    var ctx = c.getContext("2d");
    const socket = io.connect(`${urlWebsocket}?room=${room.id}&idPlayer=${getIdPlayer()}`);
    socket.emit("reset_game");

    class Item {

      constructor(x, y, width, height, color) {
        this._item = { x, y, width, height, color };
        this.moveDown = this.moveDown.bind(this);
        this.moveUp = this.moveUp.bind(this);
        this.moveLeft = this.moveLeft.bind(this);
        this.moveRight = this.moveRight.bind(this);
        this.get = this.get.bind(this);
      }

      moveLeft() {
        if (this._item.x >= 20) {
          this._item.x -= 10;
        }
      }

      getColor() {
        return this.color;
      }

      moveRight() {
        if ((this._item.x + this._item.width) < 700) {
          this._item.x += 10;
        }
      }

      moveUp() {
        if (this._item.y >= 20) {
          this._item.y -= 10;
        }
      }

      moveDown() {
        if ((this._item.y + this._item.height) < 300) {
          this._item.y += 10;
        }
      }

      get() {
        return this._item;
      }
    }

    let item = null;
    let item2 = null;
    let itemPlayerControl = {};


    function drawObjects() {
      Object.keys(itemPlayerControl).forEach((socketId, indice) => {
        const item = itemPlayerControl[socketId];
        drawRect(ctx, item.get(), item.getColor());
      })
    }

    function drawRect(ctx, item, color) {
      ctx.fillStyle = color;
      ctx.fillRect(item.x, item.y, item.width, item.height);
    }


    document.querySelector("#right").addEventListener("click", () => itemPlayerControl[getIdPlayer()].moveRight());

    socket.on("move", (data) => {
      const key = Object.keys(data)[0];
      if (key != getIdPlayer()) {
        data = data[key];
        itemPlayerControl[key] = new Item(data.x, data.y, data.width, data.height);
      }
    });

    function initUpdateFrame() {
      setInterval(() => {
        drawObjects();
        if (itemPlayerControl[getIdPlayer()])
          socket.emit("move", { [getIdPlayer()]: itemPlayerControl[getIdPlayer()].get() });
      }, 16);
    }


    socket.on("start-game", players => {
      const idPlayers = Object.keys(players);
      idPlayers.forEach(id => {
        const player = players[id]
        itemPlayerControl[id] = new Item(player.x, player.y, player.width, player.height, player.color);
      })
      drawObjects();
      initUpdateFrame();

    })

    socket.emit("is_start_game");


  </script>
</body>

</html>